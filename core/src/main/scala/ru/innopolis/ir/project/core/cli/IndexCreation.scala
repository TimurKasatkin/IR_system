package ru.innopolis.ir.project.core.cli

import java.io.File

import ru.innopolis.ir.project.core.index.VectorSpaceModelIndex
import ru.innopolis.ir.project.core.preprocessing.QueryNormalizer
import ru.innopolis.ir.project.core.readNormalizedDocumentsFrom
import ru.innopolis.ir.project.core.utils.{CollectionIterator, time}

/**
  * @author Timur Kasatkin 
  * @date 27.11.16.
  * @email aronwest001@gmail.com
  * @email t.kasatkin@innopolis.ru
  */
object IndexCreation {

	def main(args: Array[String]): Unit = {
		val parser = new scopt.OptionParser[Config]("indexCreator") {
			arg[File]("<docs_folder>")
				.action((d, c) => c.copy(normalizedDocsFolder = d))
				.text("Path to folder with normalized documents")
			arg[File]("<index_file>")
				.action((f, c) => c.copy(indexFile = f))
				.text("Path to file used by index as a postings storage.")
			opt[Boolean]('r', "remove_interim")
				.action((r, c) => c.copy(removeBlocksFiles = r))
				.text("Whether to remove interim block files, generated by index, or not. Default - true.")
			opt[Seq[String]]('q', "queries")
				.optional()
				.valueName("<query 1>,<query 2>,...")
				.action((qs, c) => c.copy(queries = qs))
				.text("Queries to perform after index is built")
		}

		parser.parse(args, Config()) match {
			case Some(config) =>
				println("Building index...")
				val index = time(VectorSpaceModelIndex(
					CollectionIterator(config.normalizedDocsFolder),
					config.indexFile,
					removeBlocksFiles = config.removeBlocksFiles
				))
				println("Reading doc's info...")
				val docIdToTitle = readNormalizedDocumentsFrom(config.normalizedDocsFolder).map(d => (d.id, d.title)).toMap
				println("Performing queries...")
				for (query <- config.queries) {
					println(
						s"""${"=" * 40}
						   |Results for query '$query'
						   |${"=" * 40}""".stripMargin)

					val (results, totalCount) = index.search(QueryNormalizer(query), 1)

					println(s"Total number of pages: $totalCount")
					results.map(res => (res.docId, docIdToTitle(res.docId), res.score)).foreach(println)
				}
				config.indexFile.deleteOnExit()
			case None =>
		}
	}

	private case class Config(normalizedDocsFolder: File = null,
	                          indexFile: File = null,
	                          removeBlocksFiles: Boolean = true,
	                          queries: Seq[String] = Seq())


}
